# -*- coding: utf-8 -*-
"""rfm_final 구하는 코드 F 수정.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PqzhNXBVsGPrcbwk3NWlQ45aIlqPMhNR
"""

import pandas as pd
# from sklearn.preprocessing import StandardScaler
# import numpy as np
# from sklearn.metrics import silhouette_score
# from sklearn.cluster import KMeans
# from yellowbrick.cluster import KElbowVisualizer
# import matplotlib.pyplot as plt
# import seaborn as sns
# from mpl_toolkits.mplot3d import Axes3D

distribution_centers = pd.read_parquet('/content/drive/MyDrive/Colab Notebooks/최종 프로젝트/루커스 데이터셋/파케이 파일/distribution_centers_optimized.parquet')
event1 = pd.read_parquet('/content/drive/MyDrive/Colab Notebooks/최종 프로젝트/루커스 데이터셋/파케이 파일/events_optimized_divided1.parquet')
event2 = pd.read_parquet('/content/drive/MyDrive/Colab Notebooks/최종 프로젝트/루커스 데이터셋/파케이 파일/events_optimized_divided2.parquet')
inventory_items = pd.read_parquet('/content/drive/MyDrive/Colab Notebooks/최종 프로젝트/루커스 데이터셋/파케이 파일/inventory_items_optimized.parquet')
order_items = pd.read_parquet('/content/drive/MyDrive/Colab Notebooks/최종 프로젝트/루커스 데이터셋/파케이 파일/order_items_optimized.parquet')
orders = pd.read_parquet('/content/drive/MyDrive/Colab Notebooks/최종 프로젝트/루커스 데이터셋/파케이 파일/orders_optimized.parquet')
products = pd.read_parquet('/content/drive/MyDrive/Colab Notebooks/최종 프로젝트/루커스 데이터셋/파케이 파일/products_optimized.parquet')
users = pd.read_parquet('/content/drive/MyDrive/Colab Notebooks/최종 프로젝트/루커스 데이터셋/파케이 파일/users_optimized.parquet')

event = pd.concat([event1, event2]).sort_index()

"""# RFM-D(Diversity) 데이터 전처리"""

#필요한 데이터 전처리
order_items_extracted = order_items.query('status != "Returned" and status != "Cancelled"')
order_items_extracted = order_items_extracted[['user_id', 'order_id', 'created_at', 'status', 'product_id', 'sale_price']].sort_values(by = 'user_id')

# 년-월-일 형식의 문자열로 변환
order_items_extracted['created_at'] = pd.to_datetime(order_items_extracted['created_at'], format='ISO8601')
order_items_extracted['created_at'] = pd.to_datetime(order_items_extracted['created_at'].dt.strftime('%Y-%m-%d'))
order_items_extracted = order_items_extracted.rename(columns = {'created_at' : 'date'}).query('date < "2023-12-01"')

#recency
recency_data = order_items_extracted.groupby('user_id')['date'].max().reset_index()
recency_data['Recency'] = (order_items_extracted['date'].max()-recency_data['date']).dt.days
recency_data

#frequency
frequency_data = order_items_extracted.groupby('user_id')['date'].nunique().reset_index()
frequency_data.rename(columns={'date': 'Frequency'}, inplace=True)

#monetary
monetary_data = order_items_extracted.groupby('user_id')['sale_price'].sum().reset_index()
monetary_data.rename(columns={'sale_price': 'Monetary'}, inplace=True)

#diversity
diversity_data = order_items_extracted.groupby('user_id')['product_id'].nunique().reset_index()
diversity_data.rename(columns={'product_id': 'Diversity'}, inplace=True)

rfm_data = recency_data.merge(frequency_data, on='user_id').merge(monetary_data, on='user_id').merge(diversity_data, on='user_id')

rfm_data['Frequency'].max()

"""# **추가 전처리**
## R : percentiles = [97.5, 86.5, 66, 34, 13.5, 2.5] : 6점 점수화
## F : 구매수 + 접속수
## M : percentiles = [97.5, 86.5, 66, 34, 13.5, 2.5] 6점 점수화
## D : 품목수 + 카테고리수

## 접속수 구하기 : 5회 이상이면 2점, 4회 이하는 1점
"""

event_filtered = event[event['user_id'].notna()].sort_values(by = ['user_id', 'created_at'])

event_filtered['created_at'] = pd.to_datetime(event_filtered['created_at'], format='ISO8601')
event_filtered['created_at'] = pd.to_datetime(event_filtered['created_at'].dt.strftime('%Y-%m-%d'))
event_filtered = event_filtered.rename(columns = {'created_at' : 'date'}).query('date < "2023-12-01"')

event_filtered_curated = event_filtered.query('sequence_number == 1').groupby('user_id')['sequence_number'].count().reset_index()
event_filtered_curated = event_filtered_curated.rename(columns= {"sequence_number": "connect_counts"})

rfm_temp = rfm_data.merge(event_filtered_curated, on = 'user_id').rename(columns = {'connect_counts' : 'access_counts'})
rfm_data = rfm_temp[['user_id', 'Recency','Frequency', 'Monetary', 'Diversity', 'access_counts']].rename(columns = {'Diversity': 'product_id_counts'})
rfm_data

#접속일

event_first_ones = event_filtered.groupby('user_id')['date'].min().reset_index().rename(columns = {'date' : 'first_access'})
event_last_ones = event_filtered.groupby('user_id')['date'].max().reset_index().rename(columns = {'date': 'last_access'})
event_first_and_last = event_first_ones.merge(event_last_ones, on = 'user_id')
#!!!!!!! event_first_and_last

#주문일

order_first_ones = order_items_extracted.groupby('user_id')['date'].min().reset_index().rename(columns = {'date' : 'first_order'})
order_last_ones = order_items_extracted.groupby('user_id')['date'].max().reset_index().rename(columns = {'date' : 'last_order'})

order_first_and_last = order_first_ones.merge(order_last_ones, on = 'user_id')

####order_first_and_last

#product칼럼
order_items_info = order_items[['user_id', 'product_id']].merge(products[['id', 'category', 'brand', 'department', 'distribution_center_id']], left_on = 'product_id', right_on = 'id')
order_items_info_by_user = order_items_info.groupby('user_id').agg({'product_id':'nunique',
                                         'category':'nunique',
                                         'brand':'nunique',
                                         'department':'nunique',
                                         'distribution_center_id':'nunique'}).reset_index()
order_items_info_by_user = (order_items_info_by_user.rename(columns = {'product_id':'product_counts', 'category': 'category_counts',
                                                                       'brand': 'brand_counts', 'department':'department_counts', 'distribution_center_id' : 'distribution_center_counts'}))

#users 칼럼
user_extracted = users[['id', 'age', 'gender','country', 'state', 'traffic_source', 'created_at']].rename(columns = {'id': 'user_id', 'created_at':'id_created_date'})
###user_extracted

user_browser_count = event.groupby('user_id')['browser'].nunique().reset_index().rename(columns = {'browser' : 'browser_counts'})
####user_browser_count

"""여기서부터 사용!

"""

merged = (event_first_and_last.merge(order_first_and_last, on='user_id').
          merge(order_items_info_by_user, on = 'user_id').
          merge(user_extracted, on = 'user_id').
          merge(user_browser_count, on ='user_id'))

rfm_final = rfm_data.merge(merged, on = 'user_id')

rfm_final

rfm_final.to_csv('rfm_final.csv', index=False)

rfm_final.to_parquet('rfm_final.parquet', index=False)